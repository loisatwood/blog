{
 "items": [
   {
     "title": "react without JSX and friends",
     "url": "/react-without-jsx",
     "excerpt": "react scares many away with its retinue of tools, but perhaps react can be free-to-play...",
     "content": ""
   },
   {
     "title": "troubleshooting AMP layouts",
     "url": "/troubleshooting-amp-layouts",
     "excerpt": "AMP layout options are restrictive and obtuse due to reflow concerns, but if you try sometimes, you get what you need...",
     "content": "<h2>troubleshooting AMP layouts</h2>\n\n<p>AMP has rustled many a jimmy, primarily with the way it forces you to read articles in google's iphone destroying AMP frame, but also because of the concerns for traffic not reaching the <em>real</em> source of the article.</p>\n\n<p>after building this little site with AMP, i've discovered that the concerns are not only for the bigwigs, but for us humble builders as well. something in particular irritating is AMP layout</p>\n\n<p>to be fair, the way layout is handled in AMP is somewhat justified. repainting and web page reflow do cause a crappy user experience on many websites, but how much of that only surfaces because everything else is slowed down by ads and behavior-tracking JS is anybody's guess.</p>\n\n<p>i personally don't think a bit of reflow is too tragic on a simple website like mine.</p>\n\n<p>so why did i experience trouble?</p>\n\n<p>in order to display my posts, i wanted to have a simple json file with my articles in it which i could use to asynchronously load my content from a single place that was separate from the markup. i also didn't want a cms or a server eating my money just to put my scribbles on the web.</p>\n\n<p>no problem! the AMP-LIST component can asynchronously load content from a JSON file. great.</p>\n\n<p>but wait, what's this? i have to tell AMP-LIST exactly how big it needs to be? how am i supposed to make it responsive if it needs a static size?</p>\n\n<p>the first thing to learn about layout is that layout=responsive doesn't require exact pixel dimensions, only an aspect ratio. which is great if you know all your images and videos will be 16:9 or 5:4 or whatever, especially since you can use srcset attributes. but what about a list of links to articles, that will steadily in crease in size as time carries on?</p>\n\n<p>you can't win, you'd have to know the aspect ratio for something that reorders/restructures itself (text). you can't compute dimensions or aspect ratios with JS because you're not allowed to use JS, that's kind of the point. what the hell do you do then?</p>\n\n<p>the answer is layout=fill, which seems like it should just work. it fills the parent element, terrific.</p>\n\n<p>not in the traditional, vanilla way though. you need layout=container for that, and it isn't available for AMP-LIST. so you decide to make the parent a fixed size in relative viewport units. okay, that works now (use layout=fill without some kind of size constraint in your amp-custom css and the whole thing just refuses to load your content for... reasons).</p>\n\n<p>uh oh</p>\n\n<p>looks like that's no good, because layout=fill has its overflow setting set to hidden with '!important' preventing you from overriding it. so now if your content stretches beyond the visible edge of the viewport, your excess content will just not be shown or scrollable</p>\n\n<p>most, at this point, would either use layout=responsive with max-widths/max-heights, concoct some crazy flexbox solution that works by pure chance in /most/ browsers, or give up on the idea altogether and just put content in the markup.</p>\n\n<p>not me.</p>\n\n<p>it took me a while, but after a little time spent in the web inspector, i found that only the custom AMP-LIST element itself has its overflow hidden. but if you go down the element tree, you can see that another div is injected with the following CSS class names: 'i-amphtml-fill-content i-amphtml-replaced-content'</p>\n\n<p>eureka. this can have its overflow set to auto/scroll, so finally i could set up my site the way i wanted.</p>\n\n<p>almost. you'll want fixed navigation for it to work properly. otherwise you'll get two scrolling sections and the whole thing becomes awful to use.</p>\n\n<p>the moral of the story is simple: AMP-HTML polices many things, but in the immortal words of jeff goldblum, life finds a way.</p>\n\n<p>unless they change it and that becomes impossible, but hopefully not!</p>"
   },
   {
     "title": "why static sites are /not/ old hat",
     "url": "/why-static-sites-are-not-old-hat",
     "excerpt": "web performance is good for everyone. time for the rebirth of the static site...",
     "content": ""
   },
   {
     "title": "what does /good/ jQuery style look like?",
     "url": "/what-does-good-jquery-style-look-like",
     "excerpt": "jquery is a masterful monadic meta-language over JS, but it is still not without its pitfalls...",
     "content": "<h2>what is good jquery style?</h2>\n\n<p>being still new to JS, i'm a heavy jquery user because of the simplicity and clarity of the little monadic meta-language that it provides.</p>\n\n<p>it's extremely easy to get going with method chaining and the implicit 'select all' way in which jquery's selector function works.</p>\n\n<p>more recently i started working with someone a bit more old school and i was surprised to find their code easier to understand than my own, despite the fact that it was written in plain ol' JS.</p>\n\n<p>there was a clear function for everything and efficient reuse and forward-planning in the actual function definitions that made it read almost as clearly as plain english.</p>\n\n<p>while i don't fancy trying to replicate that just yet, because most of the code i was reading, though clear, was based on browser API's and hacks that i wouldn't know the first thing about yet. but it did get me thinking: is my own jquery code as readable as it could be?</p>\n\n<p>i opened a random snippet of code i'd recently made, just the makings of a hamburger menu:</p>\n\n<pre>$(document).ready(function(){$(document).find(\"button#burger\").on(\"click\",function(){if($(this).next().css(\"display\") == \"none\"){$(this).next().show();}else{$(this).next().hide();}});});</pre>\n\n<p>i don't think it's impossible to see where i was going there, but in hindsight it does look incredibly shocking compared to what i later devised after a little reflection:</p>\n\n<pre>$(document).ready(function(){$(\"#burger\").click(function({$(\"#sidebar\").toggle();});});</pre>\n\n<p>quite a drastically simpler and easier to understand solution. but that's not style, that's simply how to write non-shitty code. the lesson to be learned from that experience was this: if you want to learn jquery, learn the API and put the pieces together yourself, don't just grab something from stackoverflow and repurpose it.</p>\n\n<p>but good style, which is something i think i saw in my new colleague, is quite different. it's rigorous to say the least. when i reviewed the commit history, i noticed that the entire thing had been refactored entirely several times. so, lesson 1: <strong>don't be afraid to start over</strong>. something i find very difficult is to step back and just honestly say to myself that my code is crap and it all needs to go. my colleague says his most common action besides writing the word 'function' is to select a large portion of his work and to delete it.</p>\n\n<p>what's the philosophy behind that? if you're doing it right, you'll stick to your guns on the second rewrite. if there's a better way, it'll occur to you while you're trying to remember how you did it the first time. i guess? maybe it's easier with an analogy to chess: if you see the perfect move, look again.</p>\n\n<p>of course, my colleague hates jquery with a passion, citing performance slowness and in general a big fat library where one is no longer required. i can kind of agree with that, internet explorer isn't as bad as it used to be and theres a lot of standard apis now, but i wouldn't fancy reinventing bits of jquery every time i had a project to do.</p>\n\n<p>one of the things that makes his code very easy to understand is the naming. naming is half the battle in the dev world, and all too often i don't really bother picking a useful name for a function. but when you work with others, it becomes mandatory (if you're a good hearted person) to write a good, descriptive name. if you follow the airbnb style guide's advice i think you're fine <a href=\"https://github.com/airbnb/javascript#naming-conventions\">(link)</a>.</p>\n\n<p>i think the most important thing for the jquery user specifically is regarding selectors. all too often i find myself doing this:</p>\n\n<pre>$(\".thing\").click(function(){$(\".thing\").toggle();$(\".thing\").find(\"span\").text(\"something\");});</pre><p>where a more experienced developer would simply do this:</p>\n\n<pre>var $thing = $(\".thing\");</pre>\n\n<p>which stores the selector and is a lot speedier in terms of performance. this might not be a massive boost, but the other advantage is of course that it's easier to follow when you store references.</p>\n\n<p>one thing i won't agree on, and this is an age old debate, is indentation. my new friend and google both recommend two spaces, but i'm a fan of 4-space tab and nothing is likely to change that. unfortunately i must abide by the convention but the great thing about visual studio or any good text editor is that it makes a bulk change at the end of your work easy to do.</p>\n\n<p>ultimately, much of what i identify as good style comes down to forward-planning and good structure, good knowledge of how to architecture your app code. for jquery, it's so easy to make a mess because it's so easy to make things behave how you want them to behave, but you need to think ahead. trouble is, the deeper down the rabbit hole you go, the closer to using a JS framework you end up.</p>"
   }
 ]
}
